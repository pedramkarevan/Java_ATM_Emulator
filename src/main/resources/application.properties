##### Server Port
server.port=8082
server.tomcat.connection-timeout=18000
########## Log ####################
#logging.level.org.springframework=INFO
#logging.level.web=DEBUG
logging.level.root=warn
logging.level.org.springframework.web=debug
logging.level.org.hibernate=error
################### DataSource Configuration ##########################
spring.datasource.url=jdbc:postgresql://127.0.0.1:5432/ATMEmulator
spring.datasource.username=app_user
#spring.datasource.password=ENC()
spring.datasource.password=123qwe
################### Hibernate Configuration validate: validate the schema, makes no changes to the database.update: update the schema.create: creates the schema, destroying previous data.create-drop: drop the schema at the end of the sessionnone: is all other cases.##########################
# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)
#spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.properties.hibernate.globally_quoted_identifiers=true
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
################### connection pool settings ###################
# -------------------------
# This property controls the maximum number of milliseconds that a client (that's you)
# will wait for a connection from the pool. If this time is exceeded without a connection
# becoming available, a SQLException will be thrown
spring.datasource.hikari.connectionTimeout=10000
# This property controls the maximum amount of time that a connection is allowed to
# sit idle in the pool
spring.datasource.hikari.idleTimeout=60000
# This property controls the maximum lifetime of a connection in the pool
# We strongly recommend setting this value
spring.datasource.hikari.maxLifetime=300000
# for maximum performance and responsiveness to spike demands, we recommend not
#  setting this value and instead allowing HikariCP to act as a fixed size connection pool
spring.datasource.hikari.minimumIdle=20
# This property controls the maximum size that the pool is allowed to reach,
# including both idle and in-use connections
spring.datasource.hikari.maximumPoolSize=20
# if you want your application to start even when the database is down/unavailable,
# set this property to false
spring.datasource.hikari.initializationFailFast=false
# resource bundle
spring.messages.basename=messages/messages_fa
spring.messages.encoding=UTF-8
spring.messages.use-code-as-default-message=true
#################################################
spring.main.allow-bean-definition-overriding=true
# ADMIN (SpringApplicationAdminJmxAutoConfiguration)
# JMX roleType of the application admin MBean.
spring.profiles.active=@spring.profiles.active@

########################## Actuator Configurations
# Use "*" to expose all endpoints, or a comma-separated list to expose selected ones i.e. health,info
management.endpoints.web.exposure.include = *

# Use "*" to expose all endpoints, or a comma-separated list to expose selected ones
management.endpoints.jmx.exposure.include = *
###Actuator disable
management.endpoints.enabled-by-default=false
management.endpoint.info.enabled=true

#### swagger
springdoc.swagger-ui.path=swagger-ui/index.html


application-description=@project.description@
application-version=@project.version@
springdoc.use-fqn=true


#jasypt.encryptor.password=


